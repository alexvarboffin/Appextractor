# Лог ошибок и их исправлений

## Структура записи:
1. Что сломалось
2. Как починил
3. В каком файле была ошибка
4. Советы по избеганию

## Текущие ошибки:
- Пока ошибок не обнаружено

## Советы по избеганию ошибок:
1. Всегда проверять наличие необходимых permissions
2. Использовать remember для состояний в Compose
3. Правильно обрабатывать жизненный цикл Activity
4. Следить за утечками памяти при использовании WakeLock

# Журнал ошибок и их решений

## Рекомендации по избеганию ошибок:
1. Всегда проверяйте наличие необходимых разрешений перед выполнением операций с приложениями
2. Используйте try-catch блоки при работе с системными API
3. Проверяйте null значения при работе с PackageManager
4. Используйте корутины для асинхронных операций
5. Обрабатывайте случаи когда приложение может быть удалено во время работы с ним
6. При запуске приложений проверяйте наличие LAUNCHER активности
7. При работе с системными приложениями проверяйте наличие ROOT прав
8. При извлечении APK проверяйте наличие разрешения на запись
9. При резервном копировании проверяйте наличие свободного места
10. При принудительной остановке приложений проверяйте наличие FORCE_STOP_PACKAGES разрешения

## Известные ошибки:

### 1. Ошибка при загрузке иконок приложений
- **Проблема**: Возможен NullPointerException при попытке загрузить иконку приложения
- **Решение**: Добавлена проверка на null и использование placeholder иконки
- **Файл**: compose/src/main/java/com/walhalla/compose/ui/screens/home/HomeScreen.kt
- **Рекомендация**: Всегда предусматривайте fallback для ресурсов, которые могут быть недоступны

### 2. Ошибка при работе с системными приложениями
- **Проблема**: SecurityException при попытке выполнить операции с системными приложениями
- **Решение**: Добавлена проверка isSystemApp и соответствующая обработка
- **Файл**: compose/src/main/java/com/walhalla/compose/ui/screens/home/HomeScreen.kt
- **Рекомендация**: Разделяйте логику для системных и пользовательских приложений

### 3. Ошибка при навигации
- **Проблема**: IllegalArgumentException при попытке навигации с невалидными параметрами
- **Решение**: Добавлена валидация параметров перед навигацией
- **Файл**: compose/src/main/java/com/walhalla/compose/MainActivity.kt
- **Рекомендация**: Всегда проверяйте корректность параметров навигации

### 4. Ошибка при запуске приложений
- **Проблема**: ActivityNotFoundException при попытке запуска приложения
- **Решение**: Добавлена проверка наличия LAUNCHER активности
- **Файл**: compose/src/main/java/com/walhalla/compose/ui/screens/home/HomeScreen.kt
- **Рекомендация**: Проверяйте наличие LAUNCHER активности перед запуском

### 5. Ошибка при извлечении APK
- **Проблема**: SecurityException при попытке извлечь APK файл
- **Решение**: Добавлена проверка разрешений и использование FileProvider
- **Файл**: compose/src/main/java/com/walhalla/compose/ui/screens/home/HomeScreen.kt
- **Рекомендация**: Используйте FileProvider для работы с файлами приложений

### 6. Ошибка при принудительной остановке
- **Проблема**: SecurityException при попытке остановить системное приложение
- **Решение**: Добавлена проверка ROOT прав и FORCE_STOP_PACKAGES разрешения
- **Файл**: compose/src/main/java/com/walhalla/compose/ui/screens/home/HomeScreen.kt
- **Рекомендация**: Проверяйте наличие необходимых прав перед выполнением системных операций

# Лог ошибок AppExtractor

## Формат записи:
- Что сломалось
- Как починил
- В каком файле была ошибка
- Советы по избеганию

## Известные ошибки:

### 1. ClassNotFoundException при загрузке ресурсов
- Проблема: При попытке загрузить ресурсы из другого приложения возникает ClassNotFoundException
- Решение: Добавлен флаг CONTEXT_INCLUDE_CODE при создании контекста
- Файл: app/src/main/java/com/walhalla/appextractor/activity/string/StringsPresenter.java
- Совет: Всегда использовать CONTEXT_INCLUDE_CODE | CONTEXT_IGNORE_SECURITY при работе с ресурсами других приложений

### 2. SecurityException при запуске компонентов
- Проблема: SecurityException при попытке запуска активностей/сервисов
- Решение: Добавлены флаги FLAG_ACTIVITY_NEW_TASK и FLAG_GRANT_READ_URI_PERMISSION
- Файл: extractor/src/main/java/com/walhalla/appextractor/utils/LauncherUtils.kt
- Совет: Проверять exported флаг компонента перед запуском

# Лог ошибок и их решений

## Навигация
### Ошибка: Неправильная навигация между экранами
- Проблема: При использовании TabRow с HorizontalPager возникали проблемы с сохранением состояния экранов
- Решение: Переход на Navigation Component с BottomNavigationBar
- Файл: compose/src/main/java/com/walhalla/compose/MainActivity.kt
- Совет: Использовать Navigation Component для более надежной навигации и управления состоянием

## Состояние приложения
### Ошибка: Потеря состояния при повороте экрана
- Проблема: При повороте экрана терялись введенные данные в настройках
- Решение: Использование rememberSaveable вместо remember для сохранения состояния
- Файл: compose/src/main/java/com/walhalla/compose/screens/SettingsScreen.kt
- Совет: Всегда использовать rememberSaveable для данных, которые должны переживать изменения конфигурации

## Разрешения
### Ошибка: Отсутствие необходимых разрешений
- Проблема: Приложение крашилось при попытке доступа к файловой системе
- Решение: Добавлена проверка и запрос разрешений через registerForActivityResult
- Файл: compose/src/main/java/com/walhalla/compose/screens/ExtractorScreen.kt
- Совет: Всегда проверять наличие разрешений перед выполнением операций, требующих их

## Файловая система
### Ошибка: Проблемы с доступом к файлам
- Проблема: Невозможность чтения/записи файлов на Android 10+
- Решение: Использование MediaStore API и Storage Access Framework
- Файл: compose/src/main/java/com/walhalla/compose/screens/LogScreen.kt
- Совет: Учитывать Scoped Storage на Android 10+ и использовать соответствующие API

## Compose
### Ошибка: Проблемы с производительностью
- Проблема: Лаги при прокрутке больших списков
- Решение: Использование LazyColumn вместо Column + ScrollView
- Файл: compose/src/main/java/com/walhalla/compose/screens/ExtractorScreen.kt
- Совет: Использовать ленивые компоненты для больших списков

## ViewModels
### Ошибка: Утечки памяти
- Проблема: Утечки при использовании корутин
- Решение: Использование viewModelScope и правильная отмена корутин
- Файл: compose/src/main/java/com/walhalla/compose/viewmodel/SettingsViewModel.kt
- Совет: Всегда использовать viewModelScope для корутин в ViewModel 

# Лог ошибок и рекомендации

## Потенциальные проблемы при работе с ManifestActivity

### Обработка null значений
- Проблема: Возможен NPE при работе с meta в ManifestActivity
- Решение: Добавлена проверка на null и fallback на demo данные
- Файл: ManifestActivity.kt
- Рекомендации:
  - Всегда проверять meta на null перед использованием
  - Использовать безопасные вызовы (?.) для работы с nullable типами
  - Предусмотреть fallback значения для всех nullable параметров

### Утечки памяти
- Проблема: Возможны утечки при работе с binding
- Решение: Обнуление binding в onDestroy
- Файл: ManifestActivity.kt
- Рекомендации:
  - Всегда обнулять binding в onDestroy
  - Использовать weak references для долгоживущих объектов
  - Проверять на утечки памяти с помощью LeakCanary 

## Потенциальные проблемы при работе с ManifestViewModel

### Загрузка манифестов split APK
- Проблема: Возможны ошибки при загрузке отдельных манифестов split APK
- Решение: Добавлена обработка ошибок для каждого манифеста отдельно через mapNotNull
- Файл: compose/src/main/java/com/walhalla/compose/viewmodel/ManifestViewModel.kt
- Рекомендации:
  - Не прерывать загрузку всех манифестов при ошибке одного
  - Логировать ошибки для каждого APK отдельно
  - Показывать пользователю, какие именно части не удалось загрузить

### Обновление состояния манифестов
- Проблема: Возможна гонка состояний при асинхронном обновлении манифестов
- Решение: Использование currentApkPath для отслеживания текущего контекста обновления
- Файл: compose/src/main/java/com/walhalla/compose/viewmodel/ManifestViewModel.kt
- Рекомендации:
  - Всегда проверять currentApkPath перед обновлением состояния
  - Использовать атомарные операции при обновлении списка состояний
  - Не допускать одновременную загрузку нескольких манифестов

### Утечки памяти при работе с WebView
- Проблема: Возможны утечки при использовании WebView для HTML манифестов
- Решение: Очистка WebView при смене табов и уничтожении экрана
- Файл: compose/src/main/java/com/walhalla/compose/screens/ManifestScreen.kt
- Рекомендации:
  - Использовать DisposableEffect для очистки WebView
  - Отключать JavaScript и другие потенциально опасные функции
  - Правильно обрабатывать жизненный цикл WebView 

## Проблемы с WebView в ManifestScreen

### Утечка памяти в WebView
- Проблема: WebView не освобождал ресурсы при смене табов
- Решение: 
  * Сохранение ссылки на WebView
  * Полная очистка в DisposableEffect:
    - clearHistory()
    - clearCache(true)
    - loadUrl("about:blank")
    - onPause()
    - removeAllViews()
    - destroy()
- Файл: compose/src/main/java/com/walhalla/compose/screens/ManifestScreen.kt
- Рекомендации:
  * Всегда очищать WebView при удалении из композиции
  * Использовать DisposableEffect для очистки
  * Сохранять ссылку на WebView для доступа при очистке

### Дублирование Ripple эффектов
- Проблема: Двойной Ripple эффект из-за clickable модификатора на IconButton
- Решение: Убран лишний clickable модификатор
- Файл: compose/src/main/java/com/walhalla/compose/screens/ManifestScreen.kt
- Рекомендации:
  * Не добавлять clickable на компоненты с встроенным ripple
  * Использовать встроенные обработчики кликов

### Неоптимальная работа со Snackbar
- Проблема: Использование локального состояния для Snackbar
- Решение: 
  * Единый snackbarHostState
  * Функция showSnackbar для переиспользования
  * Стандартный SnackbarHost с withDismissAction
- Файл: compose/src/main/java/com/walhalla/compose/screens/ManifestScreen.kt
- Рекомендации:
  * Использовать SnackbarHostState для управления снэкбарами
  * Группировать похожие сообщения
  * Добавлять возможность отмены 

## Проблемы с отображением манифеста

### Отсутствие форматированного контента
- Проблема: Не отображался форматированный HTML контент манифеста
- Решение: 
  * Сделан formattedContent изменяемым в ManifestState
  * Добавлено логирование ошибок
  * Исправлена обработка HTML контента в loadDataWithPatternHTML
- Файл: compose/src/main/java/com/walhalla/compose/viewmodel/ManifestViewModel.kt
- Рекомендации:
  * Всегда проверять обновление состояния после асинхронных операций
  * Использовать логирование для отладки
  * Правильно обрабатывать HTML контент от ManifestPresenterXml

### Порядок загрузки манифестов
- Проблема: Возможна гонка состояний при загрузке нескольких манифестов
- Решение:
  * Использование currentApkPath для отслеживания контекста
  * Атомарное обновление списка состояний
  * Проверка индекса перед обновлением
- Рекомендации:
  * Всегда проверять currentApkPath перед обновлением
  * Использовать атомарные операции с состоянием
  * Обрабатывать каждый манифест отдельно 

## Проблемы с загрузкой манифеста

### Белый экран при открытии манифеста
- Проблема: При открытии манифеста появляется белый экран без контента
- Решение: 
  * Добавлено подробное логирование процесса загрузки
  * Улучшена обработка ошибок в ManifestViewModel
  * Добавлен показ Snackbar с ошибками
  * Улучшен UI состояния загрузки
- Файл: compose/src/main/java/com/walhalla/compose/screens/ManifestScreen.kt, compose/src/main/java/com/walhalla/compose/viewmodel/ManifestViewModel.kt
- Рекомендации:
  * Всегда проверять наличие разрешений перед доступом к APK
  * Логировать все этапы загрузки манифеста
  * Показывать пользователю информативные сообщения об ошибках
  * Обрабатывать случай когда приложение удалено во время работы с ним
  * Проверять доступность файла APK перед чтением 

# Журнал ошибок

## Ошибки при работе с ресурсами

### ClassNotFoundException при загрузке R.string
**Проблема**: При попытке загрузить строковые ресурсы через Class.forName() возникает ClassNotFoundException.
**Решение**: Использовать PackageManager.getResourcesForApplication() и Resources.getIdentifier() для доступа к ресурсам.
**Файл**: StringsPresenter.kt
**Рекомендации**: 
- Всегда проверять наличие доступа к ресурсам через try-catch
- Использовать корректный контекст для доступа к ресурсам
- Добавлять логирование для отладки

### Resources.NotFoundException при получении значения ресурса
**Проблема**: При попытке получить значение ресурса через resources.getString() возникает NotFoundException.
**Решение**: Проверять результат getIdentifier() на 0 перед вызовом getString().
**Файл**: StringsPresenter.kt
**Рекомендации**:
- Всегда проверять идентификатор ресурса перед его использованием
- Добавлять fallback значения для случаев, когда ресурс не найден
- Логировать отсутствующие ресурсы для анализа

## Ошибки при работе с метаданными

### NullPointerException при доступе к метаданным
**Проблема**: При попытке получить метаданные компонента возникает NullPointerException.
**Решение**: Проверять metaData на null перед использованием.
**Файл**: MetaPresenter.kt
**Рекомендации**:
- Использовать безопасные вызовы (?.) при работе с метаданными
- Добавлять значения по умолчанию для случаев отсутствия метаданных
- Группировать метаданные по категориям для лучшей организации 